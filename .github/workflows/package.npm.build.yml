name: Build npm package

on:
    workflow_call:
        inputs:
            package-name:
                description: "The name of the package to build"
                required: true
                type: string
            package-path:
                description: "The path to the package to build"
                required: true
                type: string
        secrets:
            PACKAGES_REGISTRY_PAT:
                required: true

jobs:
    preparation:
        runs-on: ubuntu-latest

        outputs:
            changes-probe: ${{ steps.filter.outputs.changes-probe }}

        steps:
            - uses: actions/checkout@v3
            - name: Filter paths
              uses: dorny/paths-filter@v2
              id: filter
              with:
                  filters: |
                      changes-probe:
                        - ${{ inputs.package-path }}/**

    build:
        needs: preparation
        if: ${{ needs.preparation.outputs.changes-probe == 'true' }}
        runs-on: ubuntu-latest
        defaults:
            run:
                working-directory: ${{ inputs.package-path }}

        steps:
            - uses: actions/checkout@v3
              with:
                  ref: ${{ github.ref }}
                  fetch-depth: 1
                  clean: true
                  token: ${{ secrets.GITHUB_TOKEN }}

            - name: Create .npmrc file
              run: |
                  echo "//npm.pkg.github.com/:_authToken=${{ secrets.PACKAGES_REGISTRY_PAT }}" > .npmrc
                  echo "@hubert-cywka:registry=https://npm.pkg.github.com/" >> .npmrc

            - uses: actions/setup-node@v3
              with:
                  node-version: "20.11"

            - run: npm ci
            - run: npm run build
            - run: npm run test

            - name: Bump package version (MAIN)
              if: ${{ github.ref == 'refs/heads/main' }}
              uses: phips28/gh-action-bump-version@master
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              with:
                  PACKAGEJSON_DIR: ${{ inputs.package-path }}
                  version-type: "minor"
                  bump-policy: "ignore"
                  commit-message: "Published @hcywka/${{ inputs.package-name }}@{{version}}"
                  skip-tag: "true"

            - name: Bump package version (PR)
              if: ${{ github.ref != 'refs/heads/main' }}
              run: |
                  PACKAGE_VERSION=$(npm version prerelease --preid="rc.${{ github.event.pull_request.number }}.${{ github.run_number }}")
                  REPO=${{ github.repository }}
                  PR_NUMBER=${{ github.event.pull_request.number }}
                  
                  PACKAGE_NAME=${{ inputs.package-name }}
                  NEW_COMMENT="<b>Published @hcywka/${PACKAGE_NAME}@${PACKAGE_VERSION}</b>"
                  
                  # Fetch existing comments
                  COMMENTS=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                    "https://api.github.com/repos/${REPO}/issues/${PR_NUMBER}/comments")
                  
                  # Check for JSON parsing errors
                  if [ $? -ne 0 ]; then
                    echo "Failed to fetch comments"
                    exit 1
                  fi
                  
                  # Remove outdated package comments
                  echo "$COMMENTS" | jq -c '.[] | {id: .id, body: .body}' | while IFS= read -r COMMENT; do
                    COMMENT_ID=$(echo "$COMMENT" | jq -r '.id')
                    COMMENT_BODY=$(echo "$COMMENT" | jq -r '.body')
                  
                    if [[ $COMMENT_BODY == *"Published @hcywka/${PACKAGE_NAME}@"* ]]; then
                      echo "Removing outdated comment ID: $COMMENT_ID"
                      curl -s -X DELETE -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                        "https://api.github.com/repos/${REPO}/issues/comments/${COMMENT_ID}"
                    fi
                  done
                  
                  # Add new comment
                  echo "Adding new comment: $NEW_COMMENT"
                  curl -s -X POST -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                    -H "Content-Type: application/json" \
                    -d "{\"body\":\"$NEW_COMMENT\"}" \
                    "https://api.github.com/repos/${REPO}/issues/${PR_NUMBER}/comments"

            - run: npm publish
